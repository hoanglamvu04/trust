const db = require('../db');
const { v4: uuidv4 } = require('uuid');
const { createNotification } = require('../utils/notification');

// üìå L·∫•y t·∫•t c·∫£ b√°o c√°o (m·ªõi nh·∫•t tr∆∞·ªõc)
exports.getAllReports = async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT * FROM (
        SELECT r.*, u.name AS userName
        FROM reports r 
        LEFT JOIN users u ON r.userId = u.id 
        ORDER BY r.createdAt DESC
      ) AS sub
      GROUP BY sub.id
    `);
    res.json(rows);
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch b√°o c√°o:', err);
    res.status(500).json({ message: 'L·ªói server!' });
  }
};

// üìå L·∫•y b√°o c√°o theo ID, c√≥ ki·ªÉm tra quy·ªÅn ri√™ng t∆∞ n·∫øu ch∆∞a duy·ªát
exports.getReportById = async (req, res) => {
  const { id } = req.params;
  // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ req.user c√≥ th·ªÉ l√† undefined
  const userId = req.user?.id;

  try {
    const [rows] = await db.query("SELECT * FROM reports WHERE id = ?", [id]);

    if (!rows || rows.length === 0) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b√°o c√°o v·ªõi id:", id);
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√°o c√°o!" });
    }

    const report = rows[0];

    // N·∫øu b√†i ch∆∞a duy·ªát, ch·ªâ tr·∫£ cho ch·ªß b√†i
    if (report.status !== "approved") {
      // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥ng ph·∫£i ch·ªß b√†i th√¨ t·ª´ ch·ªëi
      if (!userId || userId !== report.userId) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p b√°o c√°o n√†y!"
        });
      }
    }

    // Tr·∫£ ra d·∫°ng c≈© FE ƒëang d√πng (n·∫øu c·∫ßn c√≥ success/report cho ƒë·ªìng b·ªô)
    res.json(report); // ho·∫∑c res.json({ success: true, report });

  } catch (err) {
    console.error("‚ùå getReportById error:", err);
    res.status(500).json({ success: false, message: "L·ªói server!", error: err.message });
  }
};

// üìå G·ª≠i b√°o c√°o m·ªõi
exports.createReport = async (req, res) => {
  const {
    accountName, accountNumber, bank, facebookLink,
    content, reporterName, zalo, confirm,
    category, proof, userId, agreedTerms
  } = req.body;

  const id = uuidv4();
  const status = 'pending';

  if (agreedTerms !== true) {
    return res.status(400).json({ message: 'B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n tr∆∞·ªõc khi g·ª≠i.' });
  }

  try {
    await db.query(
      `INSERT INTO reports (
        id, accountName, accountNumber, bank, facebookLink,
        content, reporterName, zalo, confirm, category, proof,
        userId, status, createdAt, agreedTerms
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?)`,
      [
        id, accountName, accountNumber, bank, facebookLink,
        content, reporterName, zalo, confirm, category,
        JSON.stringify(proof || []),
        userId || null,
        status,
        agreedTerms === true
      ]
    );

    if (userId) {
      await createNotification({
        userId,
        type: 'report',
        content: 'B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i. Ch√∫ng t√¥i s·∫Ω xem x√©t v√† duy·ªát trong th·ªùi gian s·ªõm nh·∫•t.',
        link: `/report/${id}`
      });
    }

    res.status(201).json({ message: 'G·ª≠i b√°o c√°o th√†nh c√¥ng!', id });
  } catch (err) {
    console.error('‚ùå L·ªói g·ª≠i b√°o c√°o:', err);
    res.status(500).json({ message: 'L·ªói server!' });
  }
};

// üìå L·∫•y danh s√°ch b√°o c√°o c·ªßa ri√™ng ng∆∞·ªùi d√πng
exports.getMyReports = async (req, res) => {
  const userId = req.user?.id;
  try {
    const [reports] = await db.query('SELECT * FROM reports WHERE userId = ?', [userId]);
    res.json(reports);
  } catch (err) {
    console.error("‚ùå getMyReports error:", err);
    res.status(500).json({ success: false, message: "L·ªói server khi l·∫•y report!" });
  }
};

// üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i b√°o c√°o (admin duy·ªát / t·ª´ ch·ªëi)
exports.updateReportStatus = async (req, res) => {
  const reportId = req.params.id;
  const { newStatus } = req.body;

  await db.query('UPDATE reports SET status = ? WHERE id = ?', [newStatus, reportId]);

  const [reportRows] = await db.query('SELECT id, userId, title FROM reports WHERE id = ?', [reportId]);
  if (!reportRows.length) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt.' });

  const ownerId = reportRows[0].userId;
  const title = reportRows[0].title;

  let statusText = '';
  if (newStatus === 'approved') statusText = 'ƒë√£ ƒë∆∞·ª£c duy·ªát';
  else if (newStatus === 'rejected') statusText = 'ƒë√£ b·ªã t·ª´ ch·ªëi';
  else statusText = `c·∫≠p nh·∫≠t tr·∫°ng th√°i: ${newStatus}`;

  await createNotification({
    userId: ownerId,
    type: 'report',
    content: `B√†i vi·∫øt "${title}" ${statusText}.`,
    link: `/report/${reportId}`,
  });

  res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!' });
};

// üìå C·∫≠p nh·∫≠t n·ªôi dung b√°o c√°o (admin ch·ªânh s·ª≠a)
exports.updateReportContent = async (req, res) => {
  const { id } = req.params;
  const {
    accountName, accountNumber, bank, facebookLink,
    content, reporterName, zalo, confirm,
    category, proof
  } = req.body;

  try {
    const [result] = await db.query(
      `UPDATE reports SET
        accountName = ?, accountNumber = ?, bank = ?, facebookLink = ?,
        content = ?, reporterName = ?, zalo = ?, confirm = ?,
        category = ?, proof = ?
      WHERE id = ?`,
      [
        accountName, accountNumber, bank, facebookLink,
        content, reporterName, zalo, confirm,
        category, JSON.stringify(proof || []),
        id
      ]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o!' });
    }

    res.json({ message: 'C·∫≠p nh·∫≠t b√°o c√°o th√†nh c√¥ng.' });
  } catch (err) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t b√°o c√°o:', err);
    res.status(500).json({ message: 'L·ªói server!' });
  }
};

// üìå TƒÉng l∆∞·ª£t xem
exports.incrementViews = async (req, res) => {
  const { id } = req.params;
  try {
    await db.query('UPDATE reports SET views = views + 1 WHERE id = ?', [id]);
    res.json({ message: 'ƒê√£ tƒÉng l∆∞·ª£t xem!' });
  } catch (err) {
    console.error("‚ùå L·ªói tƒÉng l∆∞·ª£t xem:", err);
    res.status(500).json({ message: 'L·ªói server!' });
  }
};

// üìå L·∫•y c√°c b√°o c√°o theo s·ªë t√†i kho·∫£n
exports.getReportsByAccountNumber = async (req, res) => {
  const { accountNumber } = req.params;
  if (!accountNumber) {
    return res.status(400).json({ message: "Thi·∫øu s·ªë t√†i kho·∫£n!" });
  }
  try {
    const [rows] = await db.query(
      'SELECT * FROM reports WHERE accountNumber = ?',
      [accountNumber]
    );
    res.json(rows);
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y b√°o c√°o theo account:', err);
    res.status(500).json({ message: 'L·ªói server!' });
  }
};
