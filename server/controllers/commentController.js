const db = require("../db");
const { v4: uuidv4 } = require("uuid");
const { createNotification } = require('../utils/notification');


const BAD_WORDS = [
  // T·ª´ t·ª•c, b·∫≠y ph·ªï bi·∫øn
  "ƒë·ªãt", "ƒë·ª•", "l·ªìn", "c·∫∑c", "ƒë√©o", "b∆∞·ªõm", "b√∫", "ƒëƒ©", "d√¢m", "b·ªë m√†y", "b√† m√†y", "m·∫π m√†y",
  "vkl", "vcl", "cl", "cmm", "dm", "ƒëm", "cc", "c√°i l√¨n", "l√¨n", "ƒë√≠u", "cu", "th·∫±ng ch√≥", "con ch√≥",
  "√≥c ch√≥", "ngu", "ch√≥ m√°", "m·∫π ki·∫øp", "kh·ªën n·∫°n", "ƒë√∫", "ƒë√∫ m·ª£", "th·∫±ng kh·ªën", "ƒë·ªì ch√≥", "d·ªët",
  "r·∫£nh ch√≥", "s√∫c v·∫≠t", "kh·ªën", "fuck", "shit", "asshole", "bastard", "fucking", "motherfucker", "pussy",
  // Vi·∫øt t·∫Øt bi·∫øn th·ªÉ
  "dm", "ƒëm", "cl", "cmm", "vkl", "vcl", "cc",
  // M·ªôt s·ªë c·ª•m t·ª´ mi·ªát th·ªã, b·∫°o l·ª±c, toxic
  "b·ªë l√°o", "b·ªë ƒë·ªùi", "v√¥ h·ªçc", "l√°o to√©t", "l√°o l·∫øu", "l√°o nh√°o", "ngu h·ªçc", "kh·ª±a", "t·ª•c tƒ©u", "b·∫©n b·ª±a", "r√°c r∆∞·ªüi",
  // Bi·∫øn th·ªÉ
  "ncc", "ml", "dmm", "ƒëmm", "con ƒëi√™n", "con d·ªü h∆°i", "th·∫±ng ngu", "con ngu", "b·∫©n th·ªâu", "kh·ªën khi·∫øp", "r·∫ª r√°ch",
  "b·ª±a", "b·∫©n", "ƒë·∫ßn", "ƒë·∫ßn ƒë·ªôn", "ƒë·ªì ngu", "k·ªá m·∫π", "c√∫t", "s√∫c sinh", "cave", "ƒëƒ© ƒëi·∫øm", "gi·∫ª r√°ch", "l√¢m v≈©"
];


// Chu·∫©n h√≥a, lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát, vi·∫øt th∆∞·ªùng
function normalizeVNText(str) {
  return str
    .toLowerCase()
    .normalize('NFC') // gi·ªØ ƒë√∫ng ch·ªØ ti·∫øng Vi·ªát
    .replace(/[^a-z0-9\s\u00C0-\u1EF9]/gi, ' ') // ch·ªâ gi·ªØ ch·ªØ v√† s·ªë, kho·∫£ng tr·∫Øng, k√Ω t·ª± unicode ti·∫øng Vi·ªát
    .replace(/\s+/g, ' ')
    .trim();
}

function containsBadWord(text) {
  if (!text) return false;
  const normalized = normalizeVNText(text);
  const words = normalized.split(' ');

  // Ki·ªÉm tra t·ª´ng BAD_WORDS
  return BAD_WORDS.some(word => {
    const wordNorm = normalizeVNText(word);
    // N·∫øu l√† c·ª•m (c√≥ d·∫•u c√°ch) => ki·ªÉm tra exact c·ª•m trong b√¨nh lu·∫≠n
    if (wordNorm.includes(' ')) {
      // match c·∫£ c·ª•m trong c√¢u
      return normalized.includes(wordNorm);
    }
    // N·∫øu l√† 1 t·ª´ => match t·ª´ng t·ª´ trong b√¨nh lu·∫≠n (kh√¥ng match 1 ph·∫ßn)
    return words.includes(wordNorm);
  });
}



// L·∫•y b√¨nh lu·∫≠n theo report, k√®m nickname user
exports.getCommentsByReport = async (req, res) => {
  const { reportId } = req.params;
  try {
    // L·∫•y comment + nickname user
    const [comments] = await db.query(
      `SELECT c.*, u.nickname 
       FROM comments c 
       JOIN users u ON c.userId = u.id 
       WHERE c.reportId = ? 
       ORDER BY c.createdAt DESC`,
      [reportId]
    );
    res.json(comments);
  } catch (err) {
    console.error("‚ùå getCommentsByReport error:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
};

exports.createComment = async (req, res) => {
  const { reportId, content } = req.body;
  const userId = req.session?.user?.id || null;

  // üõë Ki·ªÉm duy·ªát t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p tr∆∞·ªõc khi x·ª≠ l√Ω ti·∫øp
  if (containsBadWord(content)) {
    return res.status(400).json({ message: "B√¨nh lu·∫≠n ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p!" });
  }

  try {
    // ‚úÖ Ki·ªÉm tra b√°o c√°o t·ªìn t·∫°i v√† ƒë√£ duy·ªát
    const [[report]] = await db.query("SELECT id, userId, status FROM reports WHERE id = ?", [reportId]);
    if (!report) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°o c√°o" });
    if (report.status !== 'approved') {
      return res.status(403).json({ message: "Kh√¥ng th·ªÉ b√¨nh lu·∫≠n v√¨ b√°o c√°o ch∆∞a ƒë∆∞·ª£c duy·ªát" });
    }

    // ‚úÖ T·∫°o b√¨nh lu·∫≠n
    const id = uuidv4();
    await db.query(
      'INSERT INTO comments (id, reportId, userId, content) VALUES (?, ?, ?, ?)',
      [id, reportId, userId, content]
    );

    // ‚úÖ T·∫°o th√¥ng b√°o cho ng∆∞·ªùi t·∫°o b√°o c√°o (n·∫øu kh√¥ng ph·∫£i ch√≠nh m√¨nh)
    if (userId && userId !== report.userId) {
      const [[userRow]] = await db.query("SELECT nickname FROM users WHERE id = ?", [userId]);
      const commenter = userRow?.nickname || "Ai ƒë√≥";

      await createNotification({
        userId: report.userId,         // ng∆∞·ªùi nh·∫≠n th√¥ng b√°o
        senderId: userId,
        type: 'comment',
        content: `${commenter} ƒë√£ b√¨nh lu·∫≠n v√†o b√°o c√°o c·ªßa b·∫°n.`,
        link: `/report/${reportId}`,
      });
    }

    res.status(201).json({ message: 'ƒê√£ th√™m b√¨nh lu·∫≠n!', id });
  } catch (err) {
    console.error('‚ùå L·ªói t·∫°o b√¨nh lu·∫≠n:', err);
    res.status(500).json({ message: 'L·ªói server khi t·∫°o b√¨nh lu·∫≠n!' });
  }
};



// Like ho·∫∑c Unlike gi·ªØ nguy√™n (kh√¥ng li√™n quan nickname)
exports.toggleLike = async (req, res) => {
  const { commentId } = req.params;
  const userId = req.user.id; // ho·∫∑c req.session.user.id tu·ª≥ h·ªá th·ªëng

  try {
    // L·∫•y b√¨nh lu·∫≠n v√† ch·ªß s·ªü h·ªØu b√¨nh lu·∫≠n
    const [[row]] = await db.query(
      "SELECT likes, userId, reportId FROM comments WHERE id = ?",
      [commentId]
    );
    if (!row) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n!" });

    let likes = [];
    try {
      likes = JSON.parse(row.likes || "[]");
    } catch (e) {
      console.warn("‚ùó Parse likes error:", e);
    }

    let liked = false;
    if (likes.includes(userId)) {
      likes = likes.filter(id => id !== userId);
    } else {
      likes.push(userId);
      liked = true;
    }

    await db.query("UPDATE comments SET likes = ? WHERE id = ?", [JSON.stringify(likes), commentId]);

    // T·∫°o th√¥ng b√°o n·∫øu l√† l∆∞·ª£t like m·ªõi v√† kh√¥ng ph·∫£i t·ª± like ch√≠nh m√¨nh
    if (liked && userId !== row.userId) {
      // L·∫•y nickname ng∆∞·ªùi d√πng like
      const [[userRow]] = await db.query(
        "SELECT nickname FROM users WHERE id = ?",
        [userId]
      );
      const likerName = userRow ? userRow.nickname : "Ai ƒë√≥";

      await createNotification({
        userId: row.userId,               // ng∆∞·ªùi nh·∫≠n th√¥ng b√°o
        senderId: userId,                // üëà senderId c·∫ßn ƒë·ªÉ join ra nickname
        type: 'like',
        content: `${likerName} ƒë√£ th√≠ch b√¨nh lu·∫≠n c·ªßa b·∫°n.`,
        link: `/report/${row.reportId}`,
      });
    }


    res.json({ message: "C·∫≠p nh·∫≠t like th√†nh c√¥ng!", likes });
  } catch (err) {
    console.error("‚ùå toggleLike error:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
};

// Tr·∫£ l·ªùi b√¨nh lu·∫≠n (nickname cho reply)
exports.replyToComment = async (req, res) => {
  const { commentId } = req.params;
  const userId = req.user.id;
  const content = req.body.content;

  if (!content?.trim())
    return res.status(400).json({ message: "N·ªôi dung ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá!" });

  // Ki·ªÉm tra nickname
  const [[user]] = await db.query(
    "SELECT nickname FROM users WHERE id = ?",
    [userId]
  );
  if (!user || !user.nickname || !user.nickname.trim()) {
    return res.status(400).json({ message: "B·∫°n c·∫ßn ƒë·∫∑t bi·ªát danh tr∆∞·ªõc khi tr·∫£ l·ªùi!" });
  }

  try {
    const [[row]] = await db.query("SELECT replies FROM comments WHERE id = ?", [commentId]);
    if (!row) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n!" });

    let replies = [];
    try {
      replies = JSON.parse(row.replies || "[]");
    } catch (e) {
      console.warn("‚ùó Parse replies error:", e);
    }

    replies.push({
      userId,
      userName: user.nickname,
      content,
      createdAt: new Date().toISOString()
    });

    await db.query("UPDATE comments SET replies = ? WHERE id = ?", [JSON.stringify(replies), commentId]);
    res.json({ message: "ƒê√£ ph·∫£n h·ªìi!", replies });
  } catch (err) {
    console.error("‚ùå replyToComment error:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
};

// Xo√° b√¨nh lu·∫≠n
exports.deleteComment = async (req, res) => {
  const { commentId } = req.params;
  const userId = req.user.id;
  const userRole = req.user.roleId;

  try {
    const [[comment]] = await db.query("SELECT userId FROM comments WHERE id = ?", [commentId]);
    if (!comment) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n!" });

    // Ch·ªâ cho ph√©p ch√≠nh ch·ªß ho·∫∑c admin (role 1, 2) xo√°
    if (String(comment.userId) !== String(userId) && userRole > 2) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn xo√° b√¨nh lu·∫≠n n√†y!" });
    }

    const [result] = await db.query("DELETE FROM comments WHERE id = ?", [commentId]);
    if (result.affectedRows === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n!" });

    res.json({ message: "ƒê√£ xo√° b√¨nh lu·∫≠n!" });
  } catch (err) {
    console.error("‚ùå deleteComment error:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
};

// Xo√° ph·∫£n h·ªìi
exports.deleteReply = async (req, res) => {
  const { commentId, replyIndex } = req.params;
  const userId = req.user.id;
  const userRole = req.user.roleId;

  try {
    const [[row]] = await db.query("SELECT replies FROM comments WHERE id = ?", [commentId]);
    if (!row) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n!" });

    let replies = JSON.parse(row.replies || "[]");
    if (replyIndex < 0 || replyIndex >= replies.length)
      return res.status(400).json({ message: "Ch·ªâ s·ªë ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá!" });

    // Ch·ªâ cho ph√©p ch√≠nh ch·ªß ho·∫∑c admin (role 1, 2) xo√°
    if (
      String(replies[replyIndex].userId) !== String(userId) &&
      userRole > 2
    ) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn xo√° ph·∫£n h·ªìi n√†y!" });
    }

    replies.splice(replyIndex, 1);
    await db.query("UPDATE comments SET replies = ? WHERE id = ?", [JSON.stringify(replies), commentId]);

    res.json({ message: "ƒê√£ xo√° ph·∫£n h·ªìi!", replies });
  } catch (err) {
    console.error("‚ùå deleteReply error:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
};

exports.getCommentsByUser = async (req, res) => {
  const userId = req.user.id;
  if (!userId) {
    return res.status(401).json({ message: "Ch∆∞a ƒëƒÉng nh·∫≠p!" });
  }

  try {
    const [comments] = await db.query(
      `SELECT c.*, u.nickname
       FROM comments c
       JOIN users u ON c.userId = u.id
       WHERE c.userId = ?
       ORDER BY c.createdAt DESC`,
      [userId]
    );
    res.json(comments);
  } catch (err) {
    console.error("‚ùå getCommentsByUser error:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
};